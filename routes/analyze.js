const express = require("express");
const fs = require("fs");
const dns = require("dns").promises;
const axios = require("axios");
const tesseract = require("tesseract.js");
const { simpleParser } = require("mailparser");
const multer = require("multer");
const Check = require("../models/checkModel");

const router = express.Router();
const upload = multer({ dest: "uploads/" });

// üîê –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è–Ω—ã —Ç–µ–∫—Å–µ—Ä—É
function ensureAuth(req, res, next) {
  if (req.session.user) return next();
  res.redirect("/login");
}

// üîç SPF –∂–∞–∑–±–∞—Å—ã–Ω —Ç–µ–∫—Å–µ—Ä—É
async function checkSPF(domain) {
  try {
    const records = await dns.resolveTxt(domain);
    return records.flat().some(r => r.startsWith("v=spf1")) ? "–ò”ô (–±–∞—Ä)" : "–ñ–æ“õ";
  } catch {
    return "“ö–∞—Ç–µ";
  }
}

// üîê DKIM –∂–∞–∑–±–∞—Å—ã–Ω —Ç–µ–∫—Å–µ—Ä—É
async function checkDKIM(domain, selector = "default") {
  try {
    const records = await dns.resolveTxt(`${selector}._domainkey.${domain}`);
    return records.flat().some(r => r.includes("v=DKIM1")) ? "–ò”ô (–±–∞—Ä)" : "–ñ–æ“õ";
  } catch {
    return "“ö–∞—Ç–µ";
  }
}

// üì¨ DMARC –∂–∞–∑–±–∞—Å—ã–Ω —Ç–µ–∫—Å–µ—Ä—É
async function checkDMARC(domain) {
  try {
    const records = await dns.resolveTxt(`_dmarc.${domain}`);
    return records.flat().some(r => r.startsWith("v=DMARC1")) ? "–ò”ô (–±–∞—Ä)" : "–ñ–æ“õ";
  } catch {
    return "“ö–∞—Ç–µ";
  }
}

// üõ° VirusTotal –∞—Ä“õ—ã–ª—ã URL “õ–∞—É—ñ–ø—Å—ñ–∑–¥—ñ–≥—ñ–Ω —Ç–µ–∫—Å–µ—Ä—É
async function checkVirusTotal(url) {
  const key = process.env.VT_API_KEY;
  const id = Buffer.from(url).toString("base64url");

  try {
    const response = await axios.get(
      `https://www.virustotal.com/api/v3/urls/${id}`,
      { headers: { "x-apikey": key } }
    );
    return response.data.data.attributes.last_analysis_stats;
  } catch (e) {
    return { error: e.message };
  }
}

// ‚ö†Ô∏è “ö–∞—É—ñ–ø –¥–µ“£–≥–µ–π—ñ–Ω –±–∞“ì–∞–ª–∞—É
function calculateRisk(spf, dkim, urls) {
  if (spf === "–ñ–æ“õ" && dkim === "–ñ–æ“õ" && urls.length > 0) return "High";
  if (dkim === "–ñ–æ“õ" && urls.length > 0) return "Medium";
  return "Safe";
}

// üì• GET /analyze ‚Äî —Ñ–æ—Ä–º–∞ –±–µ—Ç—ñ
router.get("/", ensureAuth, (req, res) => {
  res.render("index", { result: null });
});

// üì§ POST /analyze ‚Äî —Ñ–∞–π–ª —Ç–∞–ª–¥–∞—É
router.post("/", ensureAuth, upload.single("file"), async (req, res) => {
  const filePath = req.file.path;
  const ext = filePath.split(".").pop().toLowerCase();
  let result = {};

  try {
    // üñº –ï–≥–µ—Ä —Å—É—Ä–µ—Ç –±–æ–ª—Å–∞ ‚Äî OCR –∞—Ä“õ—ã–ª—ã —Ç–∞–Ω—É
    if (["jpg", "jpeg", "png"].includes(ext)) {
      const { data: { text } } = await tesseract.recognize(filePath, "eng");
      result = { type: "image", text, urls: [], riskLevel: "Safe" };
    } 
    // üìß –ï–≥–µ—Ä email —Ñ–∞–π–ª—ã –±–æ–ª—Å–∞ ‚Äî .eml ”©“£–¥–µ—É
    else {
      const raw = fs.readFileSync(filePath);
      const parsed = await simpleParser(raw);

      const from    = parsed.from?.text || "";
      const subject = parsed.subject    || "";
      const text    = parsed.text       || "";
      const html    = parsed.html       || "";

      // –ë–∞—Ä–ª—ã“õ URL –º–µ–∫–µ–Ω–∂–∞–π–ª–∞—Ä—ã–Ω –∞–ª—É
      const urls = Array.from(new Set([
        ...[...text.matchAll(/https?:\/\/[^\s"'<>()]+/gi)].map(m => m[0]),
        ...[...html.matchAll(/https?:\/\/[^\s"'<>()]+/gi)].map(m => m[0])
      ]));

      // –î–æ–º–µ–Ω –±”©–ª—ñ–≥—ñ–Ω —à—ã“ì–∞—Ä—É
      const domain = from.match(/@([\w.-]+)/)?.[1] || "";

      // DNS –∂–∞–∑–±–∞–ª–∞—Ä—ã–Ω —Ç–µ–∫—Å–µ—Ä—É
      const spf   = await checkSPF(domain);
      const dkim  = await checkDKIM(domain);
      const dmarc = await checkDMARC(domain);

      // VirusTotal –∞—Ä“õ—ã–ª—ã ”ô—Ä URL-–¥—ã —Ç–µ–∫—Å–µ—Ä—É
      const vtResults = [];
      for (const url of urls) {
        const stats = await checkVirusTotal(url);
        vtResults.push({ url, stats });
      }

      const riskLevel = calculateRisk(spf, dkim, urls);

      result = {
        type: "eml", from, subject, urls, domain,
        spf, dkim, dmarc, vtResults, riskLevel
      };
    }
  } catch (e) {
    result = { error: e.message };
  }

  // üßπ –§–∞–π–ª–¥—ã –∂–æ—é
  fs.unlinkSync(filePath);

  // üîÑ –¢–∞—Ä–∏—Ö—Ç—ã —Å–∞“õ—Ç–∞—É
  Check.add({
    userId: req.session.user.id,
    timestamp: new Date().toISOString(),
    ...result
  });

  // üåê –ù”ô—Ç–∏–∂–µ–Ω—ñ –∫”©—Ä—Å–µ—Ç—É
  res.render("index", { result });
});

module.exports = router;

